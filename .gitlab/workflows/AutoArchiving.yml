# 控制流水线并发，详见文档：
# https://docs.gitlab.com/ee/ci/resource_groups/
# https://docs.gitlab.com/ee/ci/yaml/#resource_group

variables:
  GIT_STRATEGY: fetch
  TOKEN: $TOKEN
  OUTPUT_PATH: "./output.json"
  ISSUE_REPOSITORY: "内部Issue"

auto_archiving:
  stage: auto_archiving
  rules:
    - if: '$CI_PIPELINE_SOURCE == "triggers"'
      when: always
    - when: never

  image: m.daocloud.io/docker.io/library/python:3.10.13-slim-bullseye
  resource_group: auto_archiving_group
  script: |
    cd ./
    pip install -r ./src/issue_processor/requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
    pip install -r ./src/auto_archiving/requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
    export WEBHOOK_PAYLOAD=$(cat $TRIGGER_PAYLOAD);
    python ./src/issue_processor/main.py -c "./config/issue_processor.json"
    python ./src/auto_archiving/main.py -c "./config/auto_archiving.json" -fr "./归档失败记录.json"
  artifacts:
    paths:
      - 修改归档.md

push_archived_issues:
  stage: push_archived_issues
  resource_group: auto_archiving_group
  # dependencies:
  #   - auto_archiving
  needs:
    - job: auto_archiving
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always
    - when: never
  script: |
    git config --global user.email "RN-Bot@gitlab.revengenow.top"
    git config --global user.name "$RN Bot"
    git add ./修改归档.md
    issue_id=$(python ./src/utils/get_issue_id.py)
    git commit -m "Closed $ISSUE_REPOSITORY#$issue_id"
    git push origin main
